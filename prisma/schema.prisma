// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  APPLICANT
  RECRUITER
}

enum Status {
  APPLY
  DROP
  PASS
  INTERVIEW1
  INTERVIEW2
  FINAL_PASS
}

model User {
  id        Int      @id @default(autoincrement()) @map("userid")
  email     String   @unique @map("email")
  password  String    @map("password")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  UserInfo UserInfo? // 사용자(User) 테이블과 사용자 정보(UserInfo) 테이블이 1:1 관계를 맺습니다.
  ResumeUpdate  ResumeUpdate[] // 사용자(User) 테이블과 이력서변경사항(ResumeUpdate) 테이블이 1:N 관계를 맺습니다.

  @@map("User")
}

model UserInfo {
  id           Int      @id @default(autoincrement()) @map("id")
  userid       Int      @unique @map("userid")
  name         String   @map("name")
  role         Role     @default(APPLICANT)@map("role")
  createdAt    DateTime @default(now()) @map("createdAt")
  updatedAt    DateTime @updatedAt @map("updatedAt")

  // User 테이블과 관계를 설정합니다.
  User User @relation(fields: [userid], references: [id], onDelete: Cascade)
   Resume     Resume[] // 사용자(UserInfo) 테이블과 이력서(Resume) 테이블이 1:N 관계를 맺습니다.
  @@map("UserInfo")
}

model Resume {
  resumeid  Int      @id @default(autoincrement()) @map("resumeid")
  userid    Int      @map("userid") 
  title     String   @map("title")
  content   String   @map("content") @db.Text
  applystatus Status @default(APPLY) @map("status")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  // User 테이블과 관계를 설정합니다.
  UserInfo     UserInfo    @relation(fields: [userid], references: [userid], onDelete: Cascade)
  ResumeUpdate ResumeUpdate[] // 이력서(Resume) 테이블과 이력서변경사항(ResumeUpdate) 테이블이 1:N 관계를 맺습니다.

  @@map("Resume")
}

model ResumeUpdate {
  resumeid  Int      @id @default(autoincrement()) @map("resumeid")
  userid    Int      @map("userid") 
  title     String   @map("title")
  content   String   @map("content") @db.Text
  oldstatus Status @default(APPLY) @map("oldstatus")
  newstatus Status @default(APPLY) @map("newstatus")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  // Resume 테이블과 관계를 설정합니다.
  Resume Resume @relation(fields: [resumeid], references: [resumeid], onDelete: Cascade)
  // User 테이블과 관계를 설정합니다.
  User User @relation(fields: [userid], references: [id], onDelete: Cascade)

  @@map("ResumeUpdate")

  // 명시적 인덱스 제거 (이미 존재하는 경우)
  // @@index([userId], name: "ResumeUpdate_userid_key") <- 이 줄을 제거합니다.  
  // 변경으로 인해 userId      Int      @unique @map("userId") 에서 @unique 삭제 
}